from ira.enum.token_type import TokenType

PRODUCT = '*'
DIFFERENCE = '-'
UNION = '∪'
INTERSECTION = '∩'
DIVISION = '÷'
NATURAL_JOIN = '⋈'
LEFT_JOIN = '⧑'
RIGHT_JOIN = '⧒'
FULL_JOIN = '⧓'
PROJECTION = 'π'
SELECT = 'σ'
RENAME = 'ρ'
ARROW = '➡'
CARTESIAN = '⨯'

AND = "and"
OR = "or"
NOT = "not"

GREATER_THAN = ">"
LESSER_THAN = "<"
GREATER_OR_EQUAL_TO = ">="
LESSER_OR_EQUAL_TO = "<="

LOGICAL_OPERATORS = [AND, OR, NOT]
COMPARATIVE_OPERATORS = [GREATER_THAN, GREATER_OR_EQUAL_TO, LESSER_THAN, LESSER_OR_EQUAL_TO]

BINARY_OPERATORS = {NATURAL_JOIN: TokenType.NATURAL_JOIN, LEFT_JOIN: TokenType.LEFT_JOIN,
                    RIGHT_JOIN: TokenType.RIGHT_JOIN,
                    DIFFERENCE: TokenType.DIFFERENCE, PRODUCT: TokenType.PRODUCT,
                    INTERSECTION: TokenType.INTERSECTION, UNION: TokenType.UNION,
                    DIVISION: TokenType.DIVISION, CARTESIAN: TokenType.CARTESIAN}
UNARY_OPERATORS = {SELECT: TokenType.SELECT, PROJECTION: TokenType.PROJECTION, RENAME: TokenType.RENAME}

TOKEN_TYPE_TO_BINARY_OPERATOR = {value: key for key, value in BINARY_OPERATORS.items()}
TOKEN_TYPE_TO_UNARY_OPERATOR = {value: key for key, value in UNARY_OPERATORS.items()}
TOKEN_TYPE_TO_OPERATOR = {**TOKEN_TYPE_TO_BINARY_OPERATOR, **TOKEN_TYPE_TO_UNARY_OPERATOR}
TOKEN_TYPE_OPERATORS = TOKEN_TYPE_TO_OPERATOR.keys()
